cmake_minimum_required(VERSION 3.20)
project(CrossCompile LANGUAGES CXX)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    message(STATUS "Using Linux ${CMAKE_SYSTEM_VERSION}.")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    message(STATUS "Using MacOS ${CMAKE_SYSTEM_VERSION}.")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    message(STATUS "Using Windows ${CMAKE_SYSTEM_VERSION}.")
elseif(CMAKE_SYSTEM_NAME STREQUAL "AIX")
    message(STATUS "Using AIX ${CMAKE_SYSTEM_VERSION}.")
else()
    message(STATUS "Using the unsupported ${CMAKE_SYSTEM_NAME}.")
endif()

message(STATUS "Host system information:")
list(APPEND CMAKE_MESSAGE_INDENT "  ")
# message(STATUS "Host: ${CMAKE_HOST_SYSTEM}.")
message(STATUS "Host: ${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}.")
message(STATUS "Processor: ${CMAKE_HOST_SYSTEM_PROCESSOR}.")

set(keys "HOSTNAME;FQDN;TOTAL_VIRTUAL_MEMORY;AVAILABLE_VIRTUAL_MEMORY")
list(APPEND keys "TOTAL_PHYSICAL_MEMORY;AVAILABLE_PHYSICAL_MEMORY")
list(APPEND keys "OS_NAME;OS_RELEASE;OS_VERSION;OS_PLATFORM")
list(APPEND keys "NUMBER_OF_LOGICAL_CORES;NUMBER_OF_PHYSICAL_CORES")
list(APPEND keys "HAS_SERIAL_NUMBER")
list(APPEND keys "PROCESSOR_SERIAL_NUMBER;PROCESSOR_NAME;PROCESSOR_DESCRIPTION")
list(APPEND keys "IS_64BIT;HAS_FPU;HAS_MMX;HAS_MMX_PLUS;HAS_SSE;HAS_SSE2")
list(APPEND keys "HAS_SSE_FP;HAS_SSE_MMX")
list(APPEND keys "HAS_AMD_3DNOW;HAS_AMD_3DNOW_PLUS")
list(APPEND keys "HAS_IA64")
cmake_host_system_information(RESULT host_data QUERY ${keys})
foreach(query value IN ZIP_LISTS keys host_data)
    message(STATUS "${query}: ${value}")
endforeach()
list(POP_BACK CMAKE_MESSAGE_INDENT)

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    message(STATUS "Using 64 bit.")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    message(STATUS "Using 32 bit.")
else()
    message(STATUS "Using neither 64 bit nor 32 bit.")
endif()

message(STATUS "Using the ${CMAKE_CXX_BYTE_ORDER} system.")
